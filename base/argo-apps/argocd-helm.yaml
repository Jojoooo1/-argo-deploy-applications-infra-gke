apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: argocd-helm
  namespace: argocd

  # Add this finalizer ONLY if you want these to cascade delete (A cascade delete, deletes both the app and its resources, rather than only the app.)
  # finalizers:
  #   - resources-finalizer.argocd.argoproj.io

spec:
  project: default
  syncPolicy:
    syncOptions:
      - CreateNamespace=true
      - PrunePropagationPolicy=foreground

    automated:
      prune: true
      selfHeal: true
      
  source:
    chart: argo-cd
    repoURL: https://argoproj.github.io/argo-helm
    targetRevision: 5.46.7

    # https://github.com/argoproj/argo-helm/tree/main/charts/argo-cd
    helm:
      valuesObject:
        applicationSet:
          enabled: false
        notifications:
          enabled: false
        configs:
          secret:
            createSecret: false
          cm:
            url: http://argo.local.com.br
            exec.enabled: "true"
            kustomize.buildOptions: "--load-restrictor LoadRestrictionsNone"

            # dex.config: |
            #   connectors:
            #     - id: google
            #       name: Google
            #       type: oidc
            #       config:
            #         issuer: https://accounts.google.com
            #         clientID: $dex.client.id # read from argo-secrets
            #         clientSecret: $dex.client.secret # read from argo-secrets
          params:
            server.insecure: true
          rbac:
            policy.default: role:readonly
          cmp:
            create: true
            plugins:
              envsubst:
                init:
                  command: ["sh", "-c"]
                  args: ["kustomize build . --load-restrictor LoadRestrictionsNone -o raw-kustomization.yaml"]                   
                generate:
                  command: ["sh", "-c"]
                  args: ["envsubst < raw-kustomization.yaml > processed-kustomization.yaml && cp processed-kustomization.yaml /dev/stdout"]
                discover:
                  fileName: "kustomization.*"

        ## Controller ##
        controller:
          # resources:
          #   limits:
          #     cpu: 1
          #     memory: 1024Mi
          #   requests:
          #     cpu: 500m
          #     memory: 1024Mi
          metrics:
            enabled: true
            serviceMonitor:
              enabled: false # true
              namespace: argocd
              additionalLabels:
                prometheus.io/scrap-with: kube-prometheus-stack
      
        ## DEX ##
        dex:
          enabled: true
          metrics:
            enabled: true
            serviceMonitor:
              enabled: false # true
              namespace: argocd
              additionalLabels:
                prometheus.io/scrap-with: kube-prometheus-stack

        ## RepoServer ##
        repoServer:
          # resources:
          #   limits:
          #     cpu: 500m
          #     memory: 1.5Gi
          #   requests:
          #     cpu: 250m
          #     memory: 512Mi

          volumes:
            - name: custom-tools
              emptyDir: {}
            - name: cmp-plugin
              configMap:
                name: argocd-cmp-cm

          initContainers:
            - name: download-tools
              image: golang:1.21-alpine
              command: [sh, -c]
              args:
                - apk add git && go install github.com/drone/envsubst/cmd/envsubst@v1.0.3 && mv $GOPATH/bin/envsubst /custom-tools/
              volumeMounts:
                - mountPath: /custom-tools
                  name: custom-tools

          extraContainers:        
            - name: envsubst
              command: [/var/run/argocd/argocd-cmp-server]
              image: quay.io/argoproj/argocd:v2.8.4
              securityContext:
                runAsNonRoot: true
                runAsUser: 999
              volumeMounts:
                - mountPath: /var/run/argocd
                  name: var-files
                - mountPath: /home/argocd/cmp-server/plugins
                  name: plugins
                - mountPath: /tmp
                  name: tmp

                # Register plugins into sidecar
                - mountPath: /home/argocd/cmp-server/config/plugin.yaml
                  subPath: envsubst.yaml
                  name: cmp-plugin

                # Important: Mount tools into $PATH
                - name: custom-tools
                  subPath: envsubst
                  mountPath: /usr/local/bin/envsubst

          metrics:
            enabled: true
            serviceMonitor:
              enabled: false # true
              namespace: argocd
              additionalLabels:
                prometheus.io/scrap-with: kube-prometheus-stack

        ## Server ##
        server:
          # resources:
          #   limits:
          #     cpu: 400m
          #     memory: 512Mi
          #   requests:
          #     cpu: 400m
          #     memory: 512Mi
          metrics:
            enabled: true
            serviceMonitor:
              enabled: false # true
              additionalLabels:
                prometheus.io/scrap-with: kube-prometheus-stack
              namespace: argocd

        ## Redis ##
        redis:
          # resources:
          #   limits:
          #     cpu: 120m
          #     memory: 256Mi
          #   requests:
          #     cpu: 120m
          #     memory: 256Mi
          metrics:
            enabled: true
            serviceMonitor:
              enabled: false # true
              additionalLabels:
                prometheus.io/scrap-with: kube-prometheus-stack
              namespace: argocd

        # GKE Ingress
        # service:
        #   annotations:
        #     cloud.google.com/neg: '{"ingress": true}'
        #     cloud.google.com/backend-config: '{"default": "argocd-server"}'
        # ingress:
        #   enabled: true
        #   hosts:
        #     - argo${ARGOCD_ENV_DNS}.cloud-diplomate.com.br
        #   annotations:
        #     kubernetes.io/ingress.class: "gce"
        #     kubernetes.io/ingress.global-static-ip-name: lb-global-cl-dpl-argo
        #     networking.gke.io/v1beta1.FrontendConfig: "argocd-server"
        #     networking.gke.io/managed-certificates: argocd-server

        # GKEbackendConfig:
        #   enabled: true
        #   spec:
        #     iap:
        #       enabled: true
        #       oauthclientCredentials:
        #         secretName: oauth-internal-creds-secrets

        # GKEmanagedCertificate:
        #   enabled: true
        #   domains:
        #     - argo${ARGOCD_ENV_DNS}.cloud-diplomate.com.br

        # GKEfrontendConfig:
        #   enabled: true
        #   spec:
        #     redirectToHttps:
        #       enabled: true
        #       responseCodeName: PERMANENT_REDIRECT


  destination:
    server: "https://kubernetes.default.svc"
    namespace: argocd


